<!-- Chatbot Component -->
<div class="chatbot-container" id="chatbot">
    <!-- Chat Button -->
    <button class="chat-button" id="chatButton">
        <i class="fas fa-comments"></i>
        <span class="notification-badge" id="notificationBadge" style="display: none;">1</span>
    </button>

    <!-- Chat Window -->
    <div class="chat-window" id="chatWindow">
        <!-- Chat Header -->
        <div class="chat-header">
            <div class="chat-header-info">
                <h3>Customer Support</h3>
                <p class="status">Online</p>
            </div>
            <button class="close-chat" id="closeChat">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <!-- Chat Messages -->
        <div class="chat-messages" id="chatMessages">
            <!-- Welcome Message -->
            <div class="message bot">
                <div class="message-content">
                    <p>ðŸ‘‹ Hi! I'm your virtual assistant. How can I help you today?</p>
                </div>
            </div>
        </div>

        <!-- Quick Replies -->
        <div class="quick-replies" id="quickReplies">
            <button class="quick-reply-btn">Book a Stay</button>
            <button class="quick-reply-btn">Check Booking</button>
            <button class="quick-reply-btn">Help & Support</button>
        </div>

        <!-- Typing Indicator -->
        <div class="typing-indicator" id="typingIndicator">
            <span></span>
            <span></span>
            <span></span>
        </div>

        <!-- Chat Input -->
        <div class="chat-input">
            <input type="text" id="messageInput" placeholder="Type your message...">
            <button id="sendMessage">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>
</div>

<style>
    .chatbot-container {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        z-index: 1000;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    }

    .chat-button {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: #FF385C;
        border: none;
        color: white;
        font-size: 1.5rem;
        cursor: pointer;
        box-shadow: 0 4px 12px rgba(255, 56, 92, 0.3);
        transition: all 0.3s ease;
        position: relative;
    }

    .chat-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(255, 56, 92, 0.4);
    }

    .notification-badge {
        position: absolute;
        top: -5px;
        right: -5px;
        background: #FF3B30;
        color: white;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        font-size: 0.75rem;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
    }

    .chat-window {
        position: absolute;
        bottom: 80px;
        right: 0;
        width: 350px;
        height: 500px;
        background: white;
        border-radius: 16px;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
        display: none;
        flex-direction: column;
        overflow: hidden;
    }

    .chat-window.active {
        display: flex;
        animation: slideUp 0.3s ease-out;
    }

    @keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .chat-header {
        padding: 1rem;
        background: #FF385C;
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .chat-header-info h3 {
        margin: 0;
        font-size: 1.1rem;
        font-weight: 600;
    }

    .chat-header-info .status {
        margin: 0;
        font-size: 0.8rem;
        opacity: 0.9;
    }

    .close-chat {
        background: none;
        border: none;
        color: white;
        font-size: 1.2rem;
        cursor: pointer;
        padding: 0.5rem;
        transition: transform 0.2s ease;
    }

    .close-chat:hover {
        transform: rotate(90deg);
    }

    .chat-messages {
        flex-grow: 1;
        padding: 1rem;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .message {
        display: flex;
        flex-direction: column;
        max-width: 80%;
        animation: fadeIn 0.3s ease-out;
    }

    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .message.user {
        align-self: flex-end;
    }

    .message.bot {
        align-self: flex-start;
    }

    .message-content {
        padding: 0.8rem 1rem;
        border-radius: 16px;
        font-size: 0.95rem;
        line-height: 1.4;
    }

    .message.user .message-content {
        background: #FF385C;
        color: white;
        border-bottom-right-radius: 4px;
    }

    .message.bot .message-content {
        background: #F0F0F0;
        color: #333;
        border-bottom-left-radius: 4px;
    }

    /* Property Card Styles */
    .property-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        margin-top: 0.5rem;
        width: 100%;
    }

    .property-image {
        height: 120px;
        overflow: hidden;
    }

    .property-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .property-details {
        padding: 0.8rem;
    }

    .property-title {
        font-weight: 600;
        margin-bottom: 0.3rem;
        font-size: 0.9rem;
    }

    .property-location {
        color: #666;
        font-size: 0.8rem;
        margin-bottom: 0.5rem;
    }

    .property-price {
        font-weight: 600;
        color: #FF385C;
        font-size: 0.9rem;
    }

    .property-link {
        display: block;
        text-align: center;
        background: #FF385C;
        color: white;
        padding: 0.5rem;
        text-decoration: none;
        font-size: 0.8rem;
        font-weight: 500;
        margin-top: 0.5rem;
        border-radius: 4px;
    }

    .property-link:hover {
        background: #E31C5F;
    }

    /* Image Message Styles */
    .image-message {
        max-width: 200px;
        border-radius: 12px;
        overflow: hidden;
        margin-top: 0.5rem;
    }

    .image-message img {
        width: 100%;
        height: auto;
        display: block;
    }

    .typing-indicator {
        display: none;
        padding: 1rem;
        align-items: center;
        gap: 0.5rem;
    }

    .typing-indicator span {
        width: 8px;
        height: 8px;
        background: #FF385C;
        border-radius: 50%;
        display: inline-block;
        animation: bounce 1.4s infinite ease-in-out;
    }

    .typing-indicator span:nth-child(1) { animation-delay: -0.32s; }
    .typing-indicator span:nth-child(2) { animation-delay: -0.16s; }

    @keyframes bounce {
        0%, 80%, 100% { transform: scale(0); }
        40% { transform: scale(1); }
    }

    .quick-replies {
        padding: 0.8rem;
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
        border-top: 1px solid #eee;
    }

    .quick-reply-btn {
        background: #F0F0F0;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.9rem;
        color: #333;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .quick-reply-btn:hover {
        background: #E0E0E0;
        transform: translateY(-1px);
    }

    .chat-input {
        padding: 1rem;
        display: flex;
        gap: 0.5rem;
        border-top: 1px solid #eee;
    }

    .chat-input input {
        flex-grow: 1;
        padding: 0.8rem 1rem;
        border: 1px solid #ddd;
        border-radius: 24px;
        font-size: 0.95rem;
        outline: none;
        transition: border-color 0.2s ease;
    }

    .chat-input input:focus {
        border-color: #FF385C;
    }

    .chat-input button {
        background: #FF385C;
        color: white;
        border: none;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .chat-input button:hover {
        background: #E31C5F;
        transform: translateY(-1px);
    }

    @media (max-width: 768px) {
        .chatbot-container {
            bottom: 1rem;
            right: 1rem;
        }

        .chat-window {
            width: calc(100vw - 2rem);
            height: 60vh;
            bottom: 70px;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const chatbot = document.getElementById('chatbot');
        const chatButton = document.getElementById('chatButton');
        const chatWindow = document.getElementById('chatWindow');
        const closeChat = document.getElementById('closeChat');
        const chatMessages = document.getElementById('chatMessages');
        const messageInput = document.getElementById('messageInput');
        const sendMessage = document.getElementById('sendMessage');
        const quickReplies = document.getElementById('quickReplies');
        const notificationBadge = document.getElementById('notificationBadge');
        const typingIndicator = document.getElementById('typingIndicator');

        let conversationState = {
            currentTopic: null,
            lastQuestion: null,
            userPreferences: {},
            searchResults: []
        };

        // Show notification badge after 5 seconds
        setTimeout(() => {
            notificationBadge.style.display = 'flex';
        }, 5000);

        // Toggle chat window
        chatButton.addEventListener('click', () => {
            chatWindow.classList.add('active');
            notificationBadge.style.display = 'none';
        });

        closeChat.addEventListener('click', () => {
            chatWindow.classList.remove('active');
        });

        // Show typing indicator
        function showTypingIndicator() {
            typingIndicator.style.display = 'flex';
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Hide typing indicator
        function hideTypingIndicator() {
            typingIndicator.style.display = 'none';
        }

        // Create property card
        function createPropertyCard(property) {
            return `
                <div class="property-card">
                    <div class="property-image">
                        <img src="${property.images[0] || '/images/default-property.jpg'}" alt="${property.title}">
                    </div>
                    <div class="property-details">
                        <div class="property-title">${property.title}</div>
                        <div class="property-location">${property.location}</div>
                        <div class="property-price">$${property.price} / night</div>
                        <a href="/listings/${property._id}" class="property-link">View Details</a>
                    </div>
                </div>
            `;
        }

        // Create image message
        function createImageMessage(imageUrl, caption) {
            return `
                <div class="image-message">
                    <img src="${imageUrl}" alt="${caption}">
                </div>
            `;
        }

        // Send message function
        function sendUserMessage(message) {
            const messageElement = document.createElement('div');
            messageElement.className = 'message user';
            messageElement.innerHTML = `
                <div class="message-content">
                    <p>${message}</p>
                </div>
            `;
            chatMessages.appendChild(messageElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;

            // Show typing indicator
            showTypingIndicator();

            // Process message and get bot response
            processUserMessage(message);
        }

        // Process user message and get bot response
        async function processUserMessage(message) {
            // Convert message to lowercase for easier matching
            const lowerMessage = message.toLowerCase();

            // Booking flow responses
            if (message === 'Book a Stay') {
                conversationState.currentTopic = 'booking';
                setTimeout(() => {
                    hideTypingIndicator();
                    const botMessageElement = document.createElement('div');
                    botMessageElement.className = 'message bot';
                    botMessageElement.innerHTML = `
                        <div class="message-content">
                            <p>Great! I can help you find the perfect place to stay. What kind of property are you looking for?</p>
                            <p>1. Apartment<br>2. House<br>3. Villa<br>4. Hotel</p>
                        </div>
                    `;
                    chatMessages.appendChild(botMessageElement);
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }, 1500);
                return;
            }

            if (conversationState.currentTopic === 'booking') {
                if (['apartment', 'house', 'villa', 'hotel'].includes(lowerMessage)) {
                    conversationState.userPreferences.propertyType = lowerMessage;
                    conversationState.lastQuestion = 'location';
                    
                    setTimeout(() => {
                        hideTypingIndicator();
                        const botMessageElement = document.createElement('div');
                        botMessageElement.className = 'message bot';
                        botMessageElement.innerHTML = `
                            <div class="message-content">
                                <p>Perfect! Where would you like to stay? Please enter a city or location.</p>
                            </div>
                        `;
                        chatMessages.appendChild(botMessageElement);
                        chatMessages.scrollTop = chatMessages.scrollHeight;
                    }, 1500);
                    return;
                }
                
                if (conversationState.lastQuestion === 'location') {
                    conversationState.userPreferences.location = message;
                    conversationState.lastQuestion = 'dates';
                    
                    setTimeout(() => {
                        hideTypingIndicator();
                        const botMessageElement = document.createElement('div');
                        botMessageElement.className = 'message bot';
                        botMessageElement.innerHTML = `
                            <div class="message-content">
                                <p>When would you like to stay? Please enter your check-in and check-out dates (e.g., "May 1-5, 2024").</p>
                            </div>
                        `;
                        chatMessages.appendChild(botMessageElement);
                        chatMessages.scrollTop = chatMessages.scrollHeight;
                    }, 1500);
                    return;
                }

                if (conversationState.lastQuestion === 'dates') {
                    conversationState.userPreferences.dates = message;
                    conversationState.lastQuestion = 'guests';
                    
                    setTimeout(() => {
                        hideTypingIndicator();
                        const botMessageElement = document.createElement('div');
                        botMessageElement.className = 'message bot';
                        botMessageElement.innerHTML = `
                            <div class="message-content">
                                <p>How many guests will be staying?</p>
                            </div>
                        `;
                        chatMessages.appendChild(botMessageElement);
                        chatMessages.scrollTop = chatMessages.scrollHeight;
                    }, 1500);
                    return;
                }

                if (conversationState.lastQuestion === 'guests') {
                    conversationState.userPreferences.guests = message;
                    
                    // Search for properties based on preferences
                    try {
                        const response = await fetch('/api/chatbot/search', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(conversationState.userPreferences)
                        });
                        
                        const data = await response.json();
                        
                        if (data.success && data.listings.length > 0) {
                            conversationState.searchResults = data.listings;
                            
                            setTimeout(() => {
                                hideTypingIndicator();
                                const botMessageElement = document.createElement('div');
                                botMessageElement.className = 'message bot';
                                botMessageElement.innerHTML = `
                                    <div class="message-content">
                                        <p>I've found some properties that match your preferences:</p>
                                        ${conversationState.searchResults.map(property => createPropertyCard(property)).join('')}
                                        <p>Would you like to book any of these properties?</p>
                                    </div>
                                `;
                                chatMessages.appendChild(botMessageElement);
                                chatMessages.scrollTop = chatMessages.scrollHeight;
                            }, 1500);
                        } else {
                            setTimeout(() => {
                                hideTypingIndicator();
                                const botMessageElement = document.createElement('div');
                                botMessageElement.className = 'message bot';
                                botMessageElement.innerHTML = `
                                    <div class="message-content">
                                        <p>I couldn't find any properties matching your criteria. Would you like to try a different search?</p>
                                    </div>
                                `;
                                chatMessages.appendChild(botMessageElement);
                                chatMessages.scrollTop = chatMessages.scrollHeight;
                            }, 1500);
                        }
                    } catch (error) {
                        console.error('Error searching properties:', error);
                        
                        setTimeout(() => {
                            hideTypingIndicator();
                            const botMessageElement = document.createElement('div');
                            botMessageElement.className = 'message bot';
                            botMessageElement.innerHTML = `
                                <div class="message-content">
                                    <p>I'm sorry, I encountered an error while searching for properties. Please try again later.</p>
                                </div>
                            `;
                            chatMessages.appendChild(botMessageElement);
                            chatMessages.scrollTop = chatMessages.scrollHeight;
                        }, 1500);
                    }
                    
                    // Reset conversation state
                    conversationState = {
                        currentTopic: null,
                        lastQuestion: null,
                        userPreferences: {},
                        searchResults: []
                    };
                    return;
                }
            }

            // Booking check responses
            if (message === 'Check Booking') {
                conversationState.currentTopic = 'check_booking';
                
                setTimeout(() => {
                    hideTypingIndicator();
                    const botMessageElement = document.createElement('div');
                    botMessageElement.className = 'message bot';
                    botMessageElement.innerHTML = `
                        <div class="message-content">
                            <p>I can help you check your booking status. Please provide your booking reference number.</p>
                        </div>
                    `;
                    chatMessages.appendChild(botMessageElement);
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }, 1500);
                return;
            }

            if (conversationState.currentTopic === 'check_booking') {
                // Simulate booking check
                try {
                    const response = await fetch('/api/chatbot/check-booking', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ bookingId: message })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        const booking = data.booking;
                        
                        setTimeout(() => {
                            hideTypingIndicator();
                            const botMessageElement = document.createElement('div');
                            botMessageElement.className = 'message bot';
                            botMessageElement.innerHTML = `
                                <div class="message-content">
                                    <p>I've found your booking!</p>
                                    <p><strong>Property:</strong> ${booking.listing.title}</p>
                                    <p><strong>Check-in:</strong> ${new Date(booking.checkInDate).toLocaleDateString()}</p>
                                    <p><strong>Check-out:</strong> ${new Date(booking.checkOutDate).toLocaleDateString()}</p>
                                    <p><strong>Status:</strong> ${booking.status}</p>
                                    <p>Would you like to:</p>
                                    <p>1. View booking details<br>2. Modify booking<br>3. Cancel booking</p>
                                </div>
                            `;
                            chatMessages.appendChild(botMessageElement);
                            chatMessages.scrollTop = chatMessages.scrollHeight;
                        }, 1500);
                    } else {
                        setTimeout(() => {
                            hideTypingIndicator();
                            const botMessageElement = document.createElement('div');
                            botMessageElement.className = 'message bot';
                            botMessageElement.innerHTML = `
                                <div class="message-content">
                                    <p>I couldn't find a booking with that reference number. Please check and try again.</p>
                                </div>
                            `;
                            chatMessages.appendChild(botMessageElement);
                            chatMessages.scrollTop = chatMessages.scrollHeight;
                        }, 1500);
                    }
                } catch (error) {
                    console.error('Error checking booking:', error);
                    
                    setTimeout(() => {
                        hideTypingIndicator();
                        const botMessageElement = document.createElement('div');
                        botMessageElement.className = 'message bot';
                        botMessageElement.innerHTML = `
                            <div class="message-content">
                                <p>I'm sorry, I encountered an error while checking your booking. Please try again later.</p>
                            </div>
                        `;
                        chatMessages.appendChild(botMessageElement);
                        chatMessages.scrollTop = chatMessages.scrollHeight;
                    }, 1500);
                }
                
                return;
            }

            // Help & Support responses
            if (message === 'Help & Support') {
                setTimeout(() => {
                    hideTypingIndicator();
                    const botMessageElement = document.createElement('div');
                    botMessageElement.className = 'message bot';
                    botMessageElement.innerHTML = `
                        <div class="message-content">
                            <p>I'm here to help! What specific assistance do you need?</p>
                            <p>1. Account Issues<br>2. Payment Problems<br>3. Booking Issues<br>4. Technical Support</p>
                        </div>
                    `;
                    chatMessages.appendChild(botMessageElement);
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }, 1500);
                return;
            }

            // Default responses for common queries
            const commonResponses = {
                'hello': 'Hi there! How can I assist you today?',
                'hi': 'Hello! How can I help you?',
                'help': 'I\'m here to help! What do you need assistance with?',
                'thanks': 'You\'re welcome! Is there anything else I can help you with?',
                'bye': 'Goodbye! Have a great day!',
                'price': 'Our prices vary based on the property and dates. Would you like to search for available properties?',
                'payment': 'We accept all major credit cards and digital payment methods. Is there a specific payment issue you\'d like to discuss?',
                'cancel': 'I can help you with cancellation. Please provide your booking reference number.',
                'refund': 'Refund policies vary by property. I can help you check your eligibility for a refund.'
            };

            // Check for common responses
            for (const [key, response] of Object.entries(commonResponses)) {
                if (lowerMessage.includes(key)) {
                    setTimeout(() => {
                        hideTypingIndicator();
                        const botMessageElement = document.createElement('div');
                        botMessageElement.className = 'message bot';
                        botMessageElement.innerHTML = `
                            <div class="message-content">
                                <p>${response}</p>
                            </div>
                        `;
                        chatMessages.appendChild(botMessageElement);
                        chatMessages.scrollTop = chatMessages.scrollHeight;
                    }, 1500);
                    return;
                }
            }

            // Default response for unrecognized messages
            setTimeout(() => {
                hideTypingIndicator();
                const botMessageElement = document.createElement('div');
                botMessageElement.className = 'message bot';
                botMessageElement.innerHTML = `
                    <div class="message-content">
                        <p>I understand you're asking about "${message}". How can I assist you further? You can ask me about booking a stay, checking your booking, or getting help and support.</p>
                    </div>
                `;
                chatMessages.appendChild(botMessageElement);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }, 1500);
        }

        // Handle quick reply clicks
        quickReplies.addEventListener('click', (e) => {
            if (e.target.classList.contains('quick-reply-btn')) {
                sendUserMessage(e.target.textContent);
            }
        });

        // Handle send message
        sendMessage.addEventListener('click', () => {
            const message = messageInput.value.trim();
            if (message) {
                sendUserMessage(message);
                messageInput.value = '';
            }
        });

        // Handle enter key
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const message = messageInput.value.trim();
                if (message) {
                    sendUserMessage(message);
                    messageInput.value = '';
                }
            }
        });
    });
</script> 